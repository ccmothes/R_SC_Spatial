"0","# loop over months "
"0","for(i in seq_along(months)){"
"0","  # select rasters using character match "
"0","  m <- months[i]"
"0","  # grab the raster base on match in the file name "
"0","  r1 <- raster::raster(images[grepl(pattern = m, x = images)])"
"0","  # create a mask object of the radience feature"
"0","  mask <- r1 "
"0","  mask[mask > 0] <- 1"
"0","  mask[mask != 1] <- NA"
"0","  # determine the total number of cells of interest by sum all values."
"0","  totalCells <- sum(values(mask), na.rm = TRUE) ### this works because all values are 1. "
"0","  # pull the correct counts feature base on character match and apply mask"
"0","  count1 <- raster::raster(counts[grepl(pattern = m, x = counts)])*mask "
"0","  "
"0","  # create df to store results "
"0","  df1 <- data.frame(matrix(nrow = length(filters), ncol = 5))"
"0","  colnames(df1) <- c(""month"",""filter"",""mean"",""median"", ""totalArea"") "
"0","  df1$month <- m"
"0","  df1$filter <- filters"
"0","    ## loop over all seq "
"0","    for(j in seq_along(filters)){"
"0","      # generate a mask with the counts image based on the seq value "
"0","      c2 <- count1 "
"0","      # replace all values based on filter val"
"0","      c2[c2 < filters[j]] <- NA "
"0","      # generate a mask base on new filtered data "
"0","      c2[!is.na(c2)]<- 1 "
"0","      # apply that mask to radaince value "
"0","      r2 <- r1 * c2 "
"0","      # calculate Mean, median of masked radiance raster "
"0","      vals <- raster::values(r2)"
"0","      # drop all na values "
"0","      vals <- vals[!is.na(vals)]"
"0","      # calculate values and assign features to dataframe"
"0","      df1[j,""mean""] <- mean(vals)"
"0","      df1[j,""median""] <- median(vals)"
"0","      # count total obervation in mask. "
"0","      df1[j,""totalArea""] <- 100*(length(vals)/totalCells) "
"0","    }"
"0","  # create a new dataframe object on first pass then add directly to that df on "
"0","  # subsequent passes "
"0","  if(i == 1){"
"0","    df <- df1"
"0","  }else{"
"0","    df <- dplyr::bind_rows(df, df1)"
"0","  }"
"0","}"
"2","Raster objects have different extents. Result for their intersection is returned"
"2","Raster objects have different extents. Result for their intersection is returned"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","no non-missing arguments to min; returning Inf"
"2","no non-missing arguments to max; returning -Inf"
"2","Raster objects have different extents. Result for their intersection is returned"
"2","Raster objects have different extents. Result for their intersection is returned"
"0","df"
