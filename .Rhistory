for(j in rasters){
print(j)
r2 <- raster::raster(j) # read in image
n1 <- names(r2)
# assigning column based on raster name and calculate mean value per area
c1[,n1]  <- raster::extract(x =r2, y = c1, fun = mean)[,1] # extract returns a matrix so we are indexing the column so we can store the data as a vector within the sf object.
}
## condition to compile the datasets, outside of the "j" loop
if(i == 1){
df <- c1
}else{
df <- dplyr::bind_rows(df, c1)
}
}
# check the output
# View(df)
# let's also drop the spatial feature so it plays a little nicer with some functions.
df2 <- as.data.frame(df)
names(df)
# calculate the yearly average radiance for each
df2$averageRadiance <- rowMeans(df2[,9:20])
# View(df2)
### We now have an average yearly radiance for each location, so let's plot the relationship against radiance and see what we see.
library(ggplot2)
ggplot(df2, aes(x = averageRadiance, y = estimate_age)) +
geom_point() +
facet_wrap( ~ NAME)
age <- ggplot(df2, aes(estimate_age, averageRadiance)) +
geom_point() +
stat_smooth()
poverty <- ggplot(df2, aes(estimate_poverty, averageRadiance)) +
geom_point() +
stat_smooth()
age
poverty
# use apply to perform a row-wise operation on the data
df2$varianceRadiance <- apply(X = df2[,9:20],MARGIN = 1,FUN = sd)
df2[,c(2,22,23)]
# assign values from our dataframe df2 to the spatial object.
df$averageRadiance <- df2$averageRadiance
# create a facet map to show the census tracts.
tm_shape(df) +
tm_polygons(c("averageRadiance", "estimate_poverty", "estimate_age")) +
tm_facets(sync = TRUE, ncol = 3)
getwd()
wd <- getwd()
knitr::include_graphics(paste0(wd,"/intermediateGeospatialR/data/pngsForMarkdown/light.jpg"))
#[By InSapphoWeTrust from Los Angeles, California, USA - Light beam, Luxor, Las Vegas, CC BY-SA 2.0, https://commons.wikimedia.org/w/index.php?curid=24267782.]
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
wd <- getwd()
knitr::include_graphics(paste0(wd, "intermediateGeospatialR/data/pngsForMarkdown/peopleLight.jpg"))
wd <- getwd()
knitr::include_graphics(paste0(wd, "/intermediateGeospatialR/data/pngsForMarkdown/peopleLight.jpg"))
#Photo by <a href="https://unsplash.com/@vingtcent?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Vincent Guth</a> on <a href="https://unsplash.com/s/photos/headlamps?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
knitr::include_graphics(paste0(wd, "/intermediateGeospatialR/data/pngsForMarkdown/buildingLight.jpg"))
# Photo by <a href="https://unsplash.com/@redaska?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">steve pancrate</a> on <a href="https://unsplash.com/s/photos/building-lights?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
knitr::include_graphics(paste0(wd, "/intermediateGeospatialR/data/pngsForMarkdown/moonSnow.jpg")
# Photo by <a href="https://unsplash.com/@jevanleith?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Evan Leith</a> on <a href="https://unsplash.com/s/photos/moonlight?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
knitr::include_graphics(paste0(wd, "/intermediateGeospatialR/data/pngsForMarkdown/moonSnow.jpg"))
# Photo by <a href="https://unsplash.com/@jevanleith?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Evan Leith</a> on <a href="https://unsplash.com/s/photos/moonlight?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>
knitr::include_graphics("intermediateGeospatialR/data/pngsForMarkdown/texasClouds.png")
# https://www.weather-us.com/en/texas-usa/houston-climate#cloud
# load required libraries
library(sf)
library(raster)
library(dplyr)
library(tmap)
# grab all counts images
images <- list.files(path = "intermediateGeospatialR/data/nightLights",
pattern = "_counts.tif",
full.names = TRUE)
images
# read in image
temp1 <- raster::raster(images[1])
temp1
# grab a radiance image
allImages <- list.files(path = "intermediateGeospatialR/data/nightLights",
pattern = ".tif",
full.names = TRUE,
recursive = TRUE)
# print to find an image from a county
allImages[1:10]
# read in county processed image
r1 <- raster::raster(allImages[5])
# crop the raster
temp2 <- temp1 %>%
raster::crop(r1)
# pull attributes and view
qtm(temp2)
temp2
# grab the values of the raster object
vals <- raster::values(temp2)
# summary() base R
summary(vals)
# plot a histogram
hist(vals)
# create a mask object
mask <- r1
# reassing all positive values to 1
mask[mask >= 0, ] <- 1
# set any value not equal to 1 as NA
mask[mask != 1, ] <- NA
# multiple raster to apply the mask
counts <- temp2 * mask
qtm(counts)
vals2 <- raster::values(counts)
summary(vals2)
hist(vals2)
# pull total number of observations
vals_noNA <- vals2[!is.na(vals2)]
total <- length(vals_noNA)
# determine sequence of interest
seq1 <- seq(min(vals_noNA),max(vals_noNA), by =1 )
getArea <- function(values,  index){
### values: vector of numerical features
### index: numerical value to filter on
# add na clause just to be safe
values <- values[!is.na(values)]
# get total
total <- length(values)
# get new values based on index
vals_new <- values[values >= index]
# calc average
ave <- 100*(length(vals_new)/ total)
return(ave)
}
# create a dataframe to store content
df <- data.frame(matrix(nrow = length(seq1), ncol = 2))
names(df) <- c("filter", "percent area")
# assign the filter element because we have it already
df$filter <- seq1
for(i in seq_along(seq1)){
# index column position using i, but define the filter value by seq1 feature
df$`percent area`[i] <- getArea(values = vals_noNA, index = seq1[i])
}
df
n = 1
for(i in seq1){
# index column position using i, but define the filter value by seq1 feature
df$`percent area`[n] <- getArea(values = vals_noNA, index = i)
n = n + 1
}
df
# create a dataframe to store content
df <- data.frame(matrix(nrow = length(seq1), ncol = 4))
### adding new columns for mean and median
names(df) <- c("filter", "percent area", "mean", "median")
# assign the filter element because we have it already
df$filter <- seq1
# Check to make sure the original feature we read in matches our month of interest
r1
temp1
## Note: speculating on workflow, DO NOT RUN
i <- "filter level"
## create a mask of the counts layer
counts[counts >= i, ] <- 1
radMeanAndMedian <- function(countRaster, radianceRaster, index){
## create a mask of the counts layer
countRaster[countRaster < index] <- NA
countRaster[countRaster >= index] <- 1
##  apply the mask to the radiance layer
rad1 <- radianceRaster * countRaster
## remove all NA values
rad_vals <- raster::values(rad1)
rad_vals <- rad_vals[!is.na(rad_vals)]
## create a vector to store outputs
values <- c()
## calculate mean and median
values[1] <- mean(rad_vals)
values[2] <- median(rad_vals)
return(values)
}
# define input parameters
count_rastula <- counts
rad_rast  <- raster::raster(allImages[5])
# determine sequence of filters
count_vals <- raster::values(count_rastula)
vals_noNA <- count_vals[!is.na(count_vals)]
seq1 <-seq(min(vals_noNA), max(vals_noNA), by = 1)
# loop over filter values
for(i in seq_along(seq1)){
# run the area function
df$`percent area`[i] <- getArea(values = vals_noNA, index = seq1[i])
# run the mean median function
meanMedian <- radMeanAndMedian(countRaster = count_rastula,
radianceRaster = rad_rast,
index = seq1[i])
# a vector is returned with mean and median values, index to assign it to the correct positions
df[i,3:4] <- meanMedian
}
df
# install and load package
# install.packages("plotly")
library(plotly)
### Plot a figure
p1 <- plot_ly()
p1
p2 <- p1 %>%
add_trace(x = df$filter, y = df$`percent area`,type = 'scatter')
p2
p3 <- p2%>%
add_trace(x = df$filter, y = df$`percent area`,type = 'scatter', line = list(dash = 'dash', shape= "spline"))
p3
p1 <- plot_ly() %>%
add_trace(x = df$filter, y = df$`percent area`,type = 'scatter', line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Percentage of Coverage"))
p1
# mean plot
p2 <- plot_ly(x = df$filter, y = df$mean,type = 'scatter', line = list(dash = 'dash', shape= "spline")) %>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Mean"))
# median plot
p3 <- plot_ly() %>%
add_trace(x=df$filter, y=df$median,type = 'scatter', line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Median"))
p2
p3
p <- plotly::subplot(p1,p2,p3, nrows = 3, shareX = TRUE, titleY = TRUE)
p
knitr::include_graphics(paste0(wd, "/intermediateGeospatialR/data/pngsForMarkdown/texasClouds.png"))
# https://www.weather-us.com/en/texas-usa/houston-climate#cloud
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# use pacman to load require packages
if (!require("pacman")) install.packages("pacman") ## important because we will be calling this script multiple times
pacman::p_load(dplyr,raster,tmap,plotly)
# set number of sigfigs
options(scipen=999)
# set tmap to interactive viewing
tmap::tmap_mode("view")
# input features
county <- "Bexar"
months <- c("april", "may", "june", "july")
filters <- c(2,6,10)
### grab imagery for county
images <- list.files(paste0("intermediateGeospatialR/data/nightLights/", county), pattern = ".tif", full.names = TRUE)
counts <- list.files(paste0("intermediateGeospatialR/data/nightLights/"), pattern = "_counts.tif", full.names = TRUE)
### grab imagery for county
images <- list.files(paste0("intermediateGeospatialR/data/nightLights/", county), pattern = ".tif", full.names = TRUE)
counts <- list.files(paste0("intermediateGeospatialR/data/nightLights/"), pattern = "_counts.tif", full.names = TRUE)
# loop over months
for(i in seq_along(months)){
# select rasters using character match
m <- months[i]
# grab the raster base on match in the file name
r1 <- raster::raster(images[grepl(pattern = m, x = images)])
# create a mask object of the radience feature
mask <- r1
mask[mask > 0] <- 1
mask[mask != 1] <- NA
# determine the total number of cells of interest by sum all values.
totalCells <- sum(values(mask), na.rm = TRUE) ### this works because all values are 1.
# pull the correct counts feature base on character match and apply mask
count1 <- raster::raster(counts[grepl(pattern = m, x = counts)])*mask
# create df to store results
df1 <- data.frame(matrix(nrow = length(filters), ncol = 5))
colnames(df1) <- c("month","filter","mean","median", "totalArea")
df1$month <- m
df1$filter <- filters
## loop over all seq
for(j in seq_along(filters)){
# generate a mask with the counts image based on the seq value
c2 <- count1
# replace all values based on filter val
c2[c2 < filters[j]] <- NA
# generate a mask base on new filtered data
c2[!is.na(c2)]<- 1
# apply that mask to radaince value
r2 <- r1 * c2
# calculate Mean, median of masked radiance raster
vals <- raster::values(r2)
# drop all na values
vals <- vals[!is.na(vals)]
# calculate values and assign features to dataframe
df1[j,"mean"] <- mean(vals)
df1[j,"median"] <- median(vals)
# count total obervation in mask.
df1[j,"totalArea"] <- 100*(length(vals)/totalCells)
}
# create a new dataframe object on first pass then add directly to that df on
# subsequent passes
if(i == 1){
df <- df1
}else{
df <- dplyr::bind_rows(df, df1)
}
}
df
p1 <- plot_ly() %>%
add_trace(x=df$filter, y=df$mean,type = 'scatter',  line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level "),
yaxis = list(title = "Mean"))
p1
p1 <- plot_ly()%>%
add_trace(x=df$filter, y=df$mean,type = 'scatter', color = df$month, line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level "),
yaxis = list(title = "Mean"))
p1
### generate the three specific plots
# mean
p1 <- plot_ly() %>%
add_trace(x=df$filter, y=df$mean,type = 'scatter', color = df$month, line = list(dash = 'dash', shape= "spline"))%>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Mean"))
# median
p2 <- plot_ly() %>%
add_trace(x=df$filter, y=df$median,type = 'scatter', color = df$month, line = list(dash = 'dash', shape= "spline"),     showlegend = FALSE)%>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Median"))
# percent area
p3 <- plot_ly() %>%
add_trace(x=df$filter, y=df$totalArea,type = 'scatter', color = df$month, line = list(dash = 'dashdot', shape= "spline"),  showlegend = FALSE) %>%
layout(xaxis = list(title = "Filter Level"),
yaxis = list(title = "Percent Area"))
### create the subplot
p<- plotly::subplot(p1,p2,p3, nrows = 3, shareX = TRUE, titleY = TRUE)
p
# set some standard parameter for the documents.
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# provide a path to the file and an output location
rmarkdown::render(input ="3_countySummaries.Rmd",
output_file = "outputs/summary_test")
# provide a path to the file and an output location
rmarkdown::render(input ="3_countySummaries.Rmd",
output_file = "outputs/summary_test")
# provide a path to the file and an output location
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test")
# provide a path to the file and an output location
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries.Rmd",
output_file = paste0(wd,"/intermediateGeospatialR/outputs/summary_test"))
# input features
#baseDir <- "~/Desktop/R_SC_Spatial/intermediateGeospatialR"
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
# provide a path to the file and an output location
rmarkdown::render(input = "intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test_2")
# input features
#baseDir <- "~/Desktop/R_SC_Spatial/intermediateGeospatialR"
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
wd <- getwd()
# provide a path to the file and an output location
rmarkdown::render(input = "intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = paste0(wd, "/intermediateGeospatialR/outputs/summary_test_2"))
# input features
baseDir <- "~/Desktop/R_SC_Spatial/intermediateGeospatialR"
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
wd <- getwd()
# provide a path to the file and an output location
rmarkdown::render(input = paste0(baseDir, "/intermediateGeospatialR/3_countySummaries2.Rmd"),
output_file = paste0(baseDir, "/intermediateGeospatialR/outputs/summary_test_2"))
~/Desktop/R_SC_Spatial/intermediateGeospatialR/intermediateGeospatialR/3_countySummaries2.Rmd
setwd("~/Desktop/R_SC_Spatial/intermediateGeospatialR/intermediateGeospatialR/3_countySummaries2.Rmd")
# input features
baseDir <- "~/Desktop/R_SC_Spatial"
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
wd <- getwd()
# provide a path to the file and an output location
rmarkdown::render(input = paste0(baseDir, "/intermediateGeospatialR/3_countySummaries2.Rmd"),
output_file = paste0(baseDir, "/intermediateGeospatialR/outputs/summary_test_2"))
# input features
baseDir <- "~/Desktop/R_SC_Spatial"
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
wd <- getwd()
# provide a path to the file and an output location
rmarkdown::render(input = paste0(baseDir, "/intermediateGeospatialR/3_countySummaries2.Rmd"),
output_file = paste0(baseDir, "/intermediateGeospatialR/outputs/summary_test_2.html"))
# input features
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
# provide a path to the file and an output location
rmarkdown::render(input = "intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test_2")
# provide a path to the file and an output location
rmarkdown::render(input ="intermediateGeospatialR/3_countySummaries.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test")
# input features
county <- "Harris"
months <- c("april", "may", "june", "july")
filters <- c(2,3,4,6,10)
# provide a path to the file and an output lication
rmarkdown::render(input = "intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = "intermediateGeospatialR/outputs/summary_test_3")
# create a vector of county names to loop over
counties <- c("Bexar", "Brazoria", "Harris")
for(i in counties ){
print(i)
# define the county based on place in the loop
county <- i
# provide a path to the file and an output location
## edit the output path to distinguish output based on location
rmarkdown::render(input = "intermediateGeospatialR/3_countySummaries2.Rmd",
output_file = paste0("intermediateGeospatialR/outputs/summary_test_",i))
}
version
### We're suggesting the dependencies = TRUE parameter, as we're unsure all functions
### will work properly. This is not a common practice as it will often install
### material that you do not need.
# install.packages("rgdal", dependencies = TRUE)
library(rgdal)
# Type this to view a list of the functions within the library in RStudio
help(package = "rgdal")
#install.packages("raster", dependencies = TRUE)
#install.packages("sp", dependencies = TRUE)
library(raster)
library(sp)
# read in the file
proLands <- raster::raster(x = "beginnerGeospatialR/proAreas.tif")
### Example with setwd()
# setwd("F:/temp") # this will be unique to your computer
# proLands <- raster::raster(x = ~"/proAreas.tif")
# print it out to view some of the metadata
print(proLands)
# use indexing to retrieve specific information
raster::extent(proLands)
# both provide the same information
proLands@extent
# quickly visualize the content
plot(proLands)
# read in the data
d1 <- read.csv("beginnerGeospatialR/cucurbitaData.csv")
str(d1)
# view the unique species
unSpec <- unique(d1$taxon)
### subset all records associated with a species
# select our species of interest by indexing the list
species1 <- unSpec[1]
# filter the occurrence data set for all records where the taxon matches our
# species of interest.
d2 <- d1[d1$taxon == species1,]
# d1$taxon == species1 returns a vector of TRUE/FALSE values we use to select
# rows from the d1 dataframe.
# print a summary of the new subset
str(d2)
### Generate a Spatial Point Dataframe
names(d2)
# coords = df of longitude, latitude (x,y) values
coordinates <- d2[,c(4,3)] # select all rows in the 3rd and 4th columns
# the order is important, (x,y) which equates to (longitude, latitude).
# data = information associated with the records
# proj4string =
pro4 <- proLands@crs # pull the coordinate reference system from the raster layer
#compile all elements into the function.
sp1 <- sp::SpatialPointsDataFrame(coords = coordinates,
data = d2,
proj4string = pro4)
# view the object
sp1
# view the data
head(sp1@data)
plot(sp1)
#install.packages("tmap", dependencies = TRUE)
library(tmap)
# use the quick map function to visualize the data
tmap::qtm(sp1)
# check extent
raster::extent(proLands) == raster::extent(sp1)
raster::extent(proLands) > raster::extent(sp1)
# check coordinate reference system
raster::compareCRS(x = proLands, y = sp1)
# Crop the protected areas to the extent of the points
p1Crop <- raster::crop(x = proLands, y = sp1)
#quick visual check with qtm
tmap::qtm(proLands)
tmap::qtm(p1Crop)
# extract values
?extract
# extract returns a vector of length(y), therefore we can just add that
# data as new column to our spatial points dataframe
sp1$inProArea <- raster::extract(x = p1Crop, y = sp1)
head(sp1@data)
# map the points
map <- tmap::tm_shape(shp = sp1)+
tmap::tm_dots(col = "inProArea", size = 0.1,title = "Occurrences in Protected Areas")
map
# add the raster to the map
map2 <- map +
tmap::tm_shape(p1Crop) +
tmap::tm_raster(alpha = 0.4,palette = "green", title = "Protected Areas")
map2
# set the map to interactive and adjust the base map
tmap::tmap_mode("view")
map2 + tmap::tm_basemap("OpenStreetMap")
tmap::tmap_save(tm = map2, filename = "beginnerGeospatialR/map.png"))
tmap::tmap_save(tm = map2, filename = "beginnerGeospatialR/map.png")
#hint
for(i in speciesList){
map <- function(i){
# subset data
# read in raster
# crop raster
# extract values
# map content
return(map)
}
tmap::tmap_save(tm = map, filename = paste0(i,"_protectedOccurrences.png"))
}
tmap::tmap_save(tm = map2, filename = "beginnerGeospatialR/map.png")
