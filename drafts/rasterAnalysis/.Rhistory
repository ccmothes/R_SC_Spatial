read(("D:/GapAnalysis/data/CucurbitaRasters.rda")
)
load("D:/GapAnalysis/data/CucurbitaRasters.rda")
### We're suggesting the dependences = TRUE parameter as it unsure all functions
### will work properly. This is not common practice as it will often install
### material that you don not need.
# install.packages("rgdal", dependencies = TRUE)
library(rgdal)
#type this to view a list of the functions within the library in RStudio
help(package = "rgdal")
#install.packages("raster", dependencies = TRUE)
#install.packages("sp", dependencies = TRUE)
library(raster)
library(sp)
# set base director, which defines where your files are store/written
baseDir <- "D:/geoSpatialCentroid/Research-and-Program-Coordinator" # this will be unique to your computer
# read in the file
proLands <- raster::raster(x = paste0(baseDir,"/proAreas.tif"))
### Example with setwd()
# setwd("F:/temp") # this will be unique to your computer
# proLands <- raster::raster(x = ~"/proAreas.tif")
# print it out to view some of the metadata
print(proLands)
#use indexing to retreive specific information
raster::extent(proLands)
# both provide the same information
proLands@extent
#quickly visualize the content
plot(proLands)
# read in the data
d1 <- read.csv(paste0(baseDir,"/cucurbitaData.csv"))
str(d1)
#view the unique species
unSpec <- unique(d1$taxon)
### subset all records assocaited with a species
# select our specues of interest by indexing the list
species1 <- unSpec[1]
# filter the occurrence data set for all records were the taxon matches our
# species of interest.
d2 <- d1[d1$taxon == species1,]
# d1$taxon == species1 returns a vector of TRUE FALSE values, we us the to selected
# rows from the d1 dataframe.
# print a summary of the new subset
str(d2)
### generate a spatial point dataframe
names(d2)
# coords = df of longitude , latitude (x,y) values
coordinates <- d2[,c(4,3)] # select all rows in the 4th and 3rd column
# the order is important (x,y) so (longitude, latitude)
# data = information associate with the records
# proj4string =
pro4 <- raster::proLands@crs # pull the coordinate reference system from the raster layer
proLands
# the order is important (x,y) so (longitude, latitude)
# data = information associate with the records
# proj4string =
pro4 <- proLands@crs # pull the coordinate reference system from the raster layer
